---
description:
globs:
alwaysApply: true
---
# 開発速度が速い #とは

---

## 開発速度が速い？

「開発速度が速い」と言われることがあります（手前味噌ですが…）。  
では、なぜそう言っていただけるのでしょうか？

- ❌「優秀なエンジニアがいるから」  
- そもそも **開発速度って何？**

---

## 開発速度とは？

- ❌機能の開発（アウトプット）が速いこと  
- ⭕️顧客への価値提供（アウトカム）が速いこと  

---

## アウトカムを最大化するために重要な3つのこと

### 1. 使われないものを作らない

- 顧客の価値提供につながらないものは作らない  
- バシバシ「やらないこと」を決める  
- 作ったものは必ず負債になる → 後の「開発速度」を落とす  
- 作るなら「作るに値するもの」を作る  

#### ポイント
- 顧客・ドメインエキスパートの声を聞く（紙芝居, 高速でβ版を開発）  
- 体験にこだわりぬいて作る  
- 大きめの新機能は不確実性が高いので注意  
  - 不確実性を下げる工夫が大事  

---

### 2. 仕様をシンプルにする

- 複雑なものは伝わらない、使われない  
- 複雑な仕様は開発が大変 → 負債も巨大  
- 複雑な仕様は品質が低くなる  

#### ポイント
- 複雑な仕様は「何かが間違っている」という嗅覚を持つ  
- 工夫すればシンプルな体験で満たせるはず  
- シンプル化は妥協ではない  

---

### 3. 言われた通り作らない

- 顧客の「本当のお気持ち」「真のペイン」を解決するものを作る  

#### 例
- 「申請日時で古い順にソートしたい」  
  → よく深掘ると「承認者への催促機能」が本当に欲しかった  

#### ポイント
- そもそも、その業務フロー・使い方はあるべき姿か？  
- 複数の要望を抽象化し、カスタマイズせずに満たす  
- 使われるものを、シンプルに作る（重要なので2回）  
- **Howの責任は僕らにある**  

---

## お客様へのお願い

皆様からいただく要望が宝です。いつもありがとうございます mm  

これからもぜひ教えてください。  
「お客様はなぜその機能がほしいのか？」  
その本当のお気持ちをぜひ！ mm  

---

## おまけ：”機能開発速度” について

- 機能開発速度が速いと
  - 早く失敗できる  
  - 早く修正できる  

- 短期と長期の「機能開発速度」はトレードオフになりやすい  
  - 守るものを決めることが大事  

#### 守る例
- DB設計  
- APIインターフェース  
- 命名  
- セキュリティ  

#### フェーズによって重心を変える
- 立ち上げ期：ちゃんとしすぎない  
- PMF後：品質へ重心を移す  